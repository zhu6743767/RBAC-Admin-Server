package config

// DefaultConfig 返回默认配置
func DefaultConfig() *Config {
	return &Config{
		System: SystemConfig{
			IP:          "127.0.0.1",
			Port:        8080,
			Mode:        "debug",
			ReadTimeout: 30,
			WriteTimeout: 30,
			MaxHeaderBytes: 1 << 20,
		},
		DB: DBConfig{
			Mode:       "mysql",
			Host:       "localhost",
			Port:       3306,
			User:       "root",
			Password:   "",
			DbNAME:     "rbac_admin",
			Path:       "./rbac_admin.db",
			MaxIdleConns: 10,
			MaxOpenConns: 100,
			ConnMaxLifetime: 3600,
		},
		Redis: RedisConfig{
			Addr:        "localhost:6379",
			Password:    "",
			DB:          0,
			PoolSize:    10,
			MinIdleConns: 5,
			DialTimeout: 3,
			ReadTimeout: 3,
			WriteTimeout: 3,
			IdleTimeout: 1800,
			MaxConnAge:  3600,
			PoolTimeout: 30,
			IdleCheckFrequency: 60,
			MaxRetries:  3,
			MinRetryBackoff: 100,
			MaxRetryBackoff: 500,
		},
		JWT: JWTConfig{
		Secret:            "aB3kL9mN7xY2qR8sT1uV4wE6zC0pF5gH",
		ExpireHours:       24,
		RefreshExpireHours: 168,
		Issuer:            "rbac-admin-server",
		Audience:          "rbac-client",
		SigningMethod:     "HS256",
		TokenName:         "token",
	},
		Log: LogConfig{
			Level:      "info",
			Dir:        "./logs",
			Filename:   "rbac_admin.log",
			Format:     "text",
			MaxSize:    100,
			MaxAge:     7,
			MaxBackups: 3,
			Compress:   true,
			Stdout:     true,
			EnableCaller: true,
		},
		Security: SecurityConfig{
			XSSProtection:      "1",
			ContentTypeNosniff: "nosniff",
			XFrameOptions:      "DENY",
			CSRFProtection:     true,
			RateLimit:          100,
			BcryptCost:         12,
		},
		CORS: CORSConfig{
			AllowOrigins: []string{"http://localhost:3000", "http://localhost:8080"},
			AllowMethods: []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
			AllowHeaders: []string{"Origin", "Content-Type", "Authorization"},
			AllowCredentials: true,
			MaxAge: 3600,
		},
		Monitoring: MonitoringConfig{
			Enabled:           true,
			PrometheusPort:    9090,
			HealthCheckPath:   "/health",
			MetricsPath:       "/metrics",
			TraceSamplingRate: 0.1,
		},
		Swagger: SwaggerConfig{
			Enabled:        true,
			Path:           "/swagger",
			Title:          "RBAC Admin Server API",
			Description:    "RBAC Admin Server API Documentation",
			Version:        "1.0.0",
			TermsOfService: "",
			ContactName:    "Admin",
			ContactURL:     "",
			ContactEmail:   "admin@example.com",
			LicenseName:    "MIT",
			LicenseURL:     "https://opensource.org/licenses/MIT",
		},
		App: AppConfig{
			Name:        "RBAC Admin Server",
			Version:     "1.0.0",
			Description: "A RBAC Admin Server implemented in Go",
			Copyright:   "© 2023 RBAC Admin Server",
			Timezone:    "Asia/Shanghai",
			Language:    "zh-CN",
			Debug:       true,
		},
		Upload: UploadConfig{
			MaxFileSize:    10,
			AllowedTypes:   []string{"image/jpeg", "image/png", "image/gif", "application/pdf"},
			SavePath:       "./uploads",
			UseHashName:    true,
			BackupEnabled:  true,
			BackupPath:     "./backups",
		},
		Performance: PerformanceConfig{
		MaxUploadSize:    "10MB",
		RequestRateLimit: 100,
		WorkerPoolSize:   10,
		CacheTTL:         3600,
	},
	Email: Email{
		User:     "",
		Password: "",
		Host:     "smtp.qq.com",
		Port:     465,
	},
	Captcha: Captcha{
		Enable: true,
	},
	}
}