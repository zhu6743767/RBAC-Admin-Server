# =================================================================================
# 🏗️ RBAC管理员服务器配置文件示例
# =================================================================================
# 📋 文件说明：
#   这是配置文件的示例模板，展示了所有可用的配置选项
#   复制此文件并重命名为config.yaml或settings.yaml即可使用
#
# 🎯 使用场景：
#   - 新项目初始化配置
#   - 配置项参考文档
#   - 环境变量模板
#
# ⚙️ 配置优先级：
#   1. 环境变量 (最高优先级)
#   2. 配置文件
#   3. 默认值 (最低优先级)
#
# 📝 环境变量命名规则：
#   - 使用大写字母和下划线
#   - 层级关系用下划线连接
#   - 例如：SERVER_PORT=8080, DB_HOST=localhost
# =================================================================================

# 服务器配置
# HTTP服务器配置，控制网络监听、超时设置等
# 生产环境需根据实际负载调整这些参数
server:
  port: 8080                    # 服务器监听端口
                                # 开发环境：8080, 3000, 5000
                                # 生产环境：80, 443, 8080（反向代理后）
  host: "0.0.0.0"              # 服务器监听地址
                                # 0.0.0.0：监听所有网络接口
                                # 127.0.0.1：仅本地访问
                                # 192.168.x.x：特定IP访问
  read_timeout: 30             # HTTP读取超时时间（秒）
                                # 大文件上传或复杂查询需增加
                                # 建议：30-60秒
  write_timeout: 30            # HTTP写入超时时间（秒）
                                # 响应数据量大或网络延迟高需增加
                                # 建议：30-60秒
  idle_timeout: 120            # 空闲连接超时时间（秒）
                                # 及时释放不活跃连接
                                # 建议：60-300秒

# 数据库配置
# 数据库连接配置，支持多种数据库类型
# 根据部署环境选择合适的数据库类型和连接参数
database:
  type: "sqlite"                # 数据库类型选择：
                                # - sqlite: 轻量级，适合开发和小型应用
                                # - mysql: 主流选择，适合生产环境
                                # - postgresql: 功能强大，支持复杂查询
                                # - sqlserver: 企业级，Windows环境
  host: "localhost"            # 数据库服务器地址
                                # 本地：localhost, 127.0.0.1
                                # 远程：IP地址或域名
                                # Docker：容器名或服务名
  port: 3306                   # 数据库服务器端口
                                # MySQL: 3306
                                # PostgreSQL: 5432
                                # SQLServer: 1433
  database: "rbac_admin"       # 数据库名称
                                # 确保数据库已创建且有访问权限
  username: "your_username"    # 数据库用户名
                                # 生产环境避免使用root，创建专用用户
  password: "your_password"    # 数据库密码
                                # 生产环境必须设置强密码
  charset: "utf8mb4"            # 数据库字符集
                                # utf8mb4支持完整Unicode，包括emoji
  ssl_mode: "disable"          # SSL连接模式
                                # disable: 禁用SSL（开发环境）
                                # require: 需要SSL（生产环境推荐）
                                # verify-full: 验证证书（最高安全）
  max_open: 100                # 最大打开连接数
                                # 根据数据库配置调整
                                # MySQL: max_connections * 0.8
  max_idle: 10                 # 最大空闲连接数
                                # 建议设置为max_open的10-20%
  max_life: 3600               # 连接最大生命周期（秒）
                                # 定期回收连接避免内存泄漏
                                # 建议：1800-3600秒

# Redis配置
# Redis缓存服务器配置，用于会话存储、缓存、消息队列
# 支持单机、主从、哨兵、集群等多种部署模式
redis:
  host: "localhost"            # Redis服务器地址
                                # 本地：localhost, 127.0.0.1
                                # 远程：IP地址或域名
                                # Docker：容器名或服务名
  port: 6379                   # Redis服务器端口，默认6379
  password: "your_redis_password"  # Redis认证密码
                                     # 生产环境必须设置强密码
                                     # 空字符串表示无密码认证
  database: 0                  # Redis数据库编号(0-15)
                                # 0：默认数据库
                                # 1-15：可用于不同环境隔离
  max_idle: 10                 # 连接池最大空闲连接数
                                # 保持少量空闲连接提高性能
  max_active: 100              # 连接池最大活跃连接数
                                # 根据并发量和Redis配置调整
  idle_timeout: 300            # 空闲连接超时时间（秒）
                                # 及时释放长时间空闲的连接

# 日志配置
# 应用日志配置，支持多种日志库和输出格式
# 生产环境建议使用JSON格式便于日志收集和分析
log:
  type: "logrus"               # 日志库类型选择：
                                # - logrus: 功能丰富，社区支持好
                                # - zap: 高性能，Uber开发
                                # - zerolog: 零分配，极致性能
  level: "info"                # 日志级别控制：
                                # - debug: 最详细，包含调试信息
                                # - info: 一般信息，生产环境推荐
                                # - warn: 警告信息
                                # - error: 错误信息
  format: "json"               # 日志输出格式：
                                # - json: 结构化日志，便于ELK收集
                                # - text: 人类可读，开发环境推荐
  output: "both"               # 日志输出位置：
                                # - stdout: 标准输出，容器环境推荐
                                # - file: 文件输出，传统部署推荐
                                # - both: 同时输出，便于调试
  log_dir: "logs"              # 日志文件存储目录
                                # 确保目录存在且有写入权限
  max_size: 100                # 单个日志文件最大大小（MB）
                                # 超过此大小自动切分新文件
  max_age: 7                   # 日志文件最大保留天数
                                # 过期文件自动清理，节省磁盘空间
  max_backups: 10              # 保留的旧日志文件数量
                                # 超过数量自动删除最旧的
  compress: true               # 是否压缩旧日志文件
                                # 节省磁盘空间，但增加CPU开销
  local_time: true             # 使用本地时间而非UTC时间
  enable_caller: true          # 记录日志调用位置
                                # 包含文件名、函数名、行号，便于调试
  enable_trace: true           # 错误时记录堆栈跟踪
                                # 便于错误定位和调试分析

# JWT配置
# JSON Web Token配置，用于用户认证和授权
# 生产环境必须修改默认密钥，建议使用强随机字符串
jwt:
  secret: "your_jwt_secret_key_here"      # JWT签名密钥（⚠️ 必须修改）
                                        # 生产环境使用强随机字符串
                                        # 长度建议：32字节以上
                                        # 生成命令：openssl rand -hex 32
  expire: 24                           # 访问令牌过期时间（小时）
                                        # 短过期时间提高安全性
                                        # 建议：1-24小时
  refresh: 168                        # 刷新令牌过期时间（小时）
                                        # 长过期时间减少登录频率
                                        # 建议：7-30天（168-720小时）
  issuer: "rbac-admin"               # JWT签发者标识
                                        # 用于验证token来源
                                        # 建议设置为应用名称
  algorithm: "HS256"                 # 签名算法
                                        # HS256: HMAC对称加密（推荐）
                                        # RS256: RSA非对称加密（更安全但复杂）

# 安全配置
# 应用安全策略配置，包括限流、跨域、认证等
# 生产环境建议全部启用以增强安全性
security:
  enable_rate_limit: true        # 启用请求频率限制
                                # 防止暴力破解、API滥用
                                # 基于IP地址的滑动窗口算法
  rate_limit: 100              # 每分钟最大请求次数
                                # 根据API复杂度和用户行为调整
                                # 建议：普通API 100-1000次/分钟
  rate_window: 60              # 限流时间窗口（秒）
                                # 滑动窗口大小，建议60秒
  enable_cors: true            # 启用跨域资源共享
                                # 允许前端跨域访问API
                                # 生产环境需配置具体域名
  allowed_origins: ["*"]        # 允许的跨域来源
                                # 开发环境：["*"] 允许所有来源
                                # 生产环境：["https://example.com", "https://app.example.com"]
  allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"] # 允许的HTTP方法
                                # RESTful API标准方法
                                # OPTIONS用于预检请求，必须包含
  allowed_headers: ["*"]        # 允许的请求头
                                # 开发环境：["*"] 允许所有头
                                # 生产环境：["Content-Type", "Authorization", "X-Requested-With"]

# 应用配置
# 应用级基础配置，包含名称、版本、环境等基本信息
# 这些配置影响整个应用的行为和显示
app:
  name: "RBAC Admin Server"    # 应用名称
                               # 显示在页面标题、API文档、邮件模板中
  version: "1.0.0"            # 应用版本号
                               # 用于API版本控制、缓存失效、兼容性检查
                               # 遵循语义化版本规范
  environment: "development"   # 运行环境设置：
                               # - development: 开发环境（调试模式、详细日志）
                               # - testing: 测试环境（模拟生产配置）
                               # - staging: 预发布环境（接近生产）
                               # - production: 生产环境（性能优化、安全模式）
  debug: true                 # 调试模式开关
                               # 开发环境：true（显示详细错误、SQL日志）
                               # 生产环境：false（隐藏敏感信息、优化性能）